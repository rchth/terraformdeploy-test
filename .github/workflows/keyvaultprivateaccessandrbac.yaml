name: 'keyvaultprivateaccessandrbac'

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'

jobs:
  generate-matrix:
    name: 'Generate Matrix'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find-tfvars.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Find .tfvars files
        id: find-tfvars
        run: |
          cd ./keyvaultwithrbacanddenypublic
          tfvars_files=$(find . -name "*.tfvars" | jq -R -s -c 'split("\n") | map(select(length > 0))')

          echo "::set-output name=matrix::$tfvars_files"
      
      - name : Double check value of tfvars
        id : ls-tfvars
        run: |
          echo "Matrix JSON: ${{ steps.find-tfvars.outputs.matrix }}"
  infradeploy:
    name: 'infradeploy'
    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      TF_BACKEND_ACCESS_KEY: ${{ secrets.ACCESS_KEY }}       
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash    
    needs: generate-matrix
    strategy:
      matrix:
        tfvars_file: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
    steps: 
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name : Play with current dir 
        id: play_dir
        run: |
          ls        
      # Initialize a neww or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd ./keyvaultwithrbacanddenypublic
          # Extract the base name of the tfvars file without extension
          state_key=$(basename ${{ matrix.tfvars_file }} .tfvars).tfstate
          terraform init -upgrade \
            -backend-config="resource_group_name=rg-test-for-tf" \
            -backend-config="storage_account_name=statestorage" \
            -backend-config="container_name=state" \
            -backend-config="key=$state_key" \
            -backend-config="access_key=$TF_BACKEND_ACCESS_KEY"
      
      - name: Terraform Plan and Apply
        run: |
            cd ./keyvaultwithrbacanddenypublic
            terraform plan -var-file=${{ matrix.tfvars_file }} -input=false || true
            terraform apply -var-file=${{ matrix.tfvars_file }} -auto-approve -input=false || true
            echo "Running terraform apply for $tfvars_file"

      


